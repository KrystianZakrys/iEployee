// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using iEmployee.CommandQuery;

namespace iEmployee.CommandQuery.Migrations
{
    [DbContext(typeof(EmployeeContext))]
    [Migration("20200912181003_InsertAlotOfTestingData")]
    partial class InsertAlotOfTestingData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("iEmployee.Domain.EmployeeProject", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EmployeeId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("EmployeeProject");
                });

            modelBuilder.Entity("iEmployee.Domain.Employees.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Sex")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("iEmployee.Domain.Employees.Manager", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RoomNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("iEmployee.Domain.JobHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PositionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id", "EmployeeId", "PositionId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PositionId");

                    b.ToTable("JobHistories");
                });

            modelBuilder.Entity("iEmployee.Domain.Position", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Positions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("04b260df-ea43-491d-ba68-b0d5b775d7cf"),
                            Code = "D",
                            Name = "Developer"
                        },
                        new
                        {
                            Id = new Guid("91d2269c-8a61-4356-a1b3-9460d86108de"),
                            Code = "F",
                            Name = "Fullstack"
                        },
                        new
                        {
                            Id = new Guid("6d485caa-67c7-45e6-a4b4-3652bfa09151"),
                            Code = "P",
                            Name = "Patron"
                        },
                        new
                        {
                            Id = new Guid("c8804910-7246-4896-a22b-db8789763cd4"),
                            Code = "I",
                            Name = "Inspector"
                        },
                        new
                        {
                            Id = new Guid("041c6e60-0495-47e0-a4d5-997e46847901"),
                            Code = "A",
                            Name = "Architect"
                        },
                        new
                        {
                            Id = new Guid("8f799fea-9d7a-4245-8461-1c8dacd334fd"),
                            Code = "T",
                            Name = "Tester"
                        });
                });

            modelBuilder.Entity("iEmployee.Domain.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bd990d9e-e835-4fdc-acfc-84cbd0abb9a4"),
                            Name = ".NET CRUD"
                        },
                        new
                        {
                            Id = new Guid("36b27ef9-33f6-499e-9f08-96614b055c55"),
                            Name = "Java Mastering Classes"
                        },
                        new
                        {
                            Id = new Guid("4021e9a4-1c5e-454d-b272-c0fafe29c8cd"),
                            Name = "DRINKING COFFER"
                        },
                        new
                        {
                            Id = new Guid("cb0817cc-399e-459b-924c-f77d6e2d5a66"),
                            Name = "Mobile app"
                        });
                });

            modelBuilder.Entity("iEmployee.Domain.EmployeeProject", b =>
                {
                    b.HasOne("iEmployee.Domain.Employees.Employee", "Employee")
                        .WithMany("Projects")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iEmployee.Domain.Project", "Project")
                        .WithMany("Employees")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("iEmployee.Domain.Employees.Employee", b =>
                {
                    b.HasOne("iEmployee.Domain.Employees.Manager", "Manager")
                        .WithMany("Subordinates")
                        .HasForeignKey("ManagerId");

                    b.OwnsOne("iEmployee.Domain.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("EmployeeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ZipCode")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("EmployeeId");

                            b1.ToTable("Employees");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeId");
                        });
                });

            modelBuilder.Entity("iEmployee.Domain.Employees.Manager", b =>
                {
                    b.HasOne("iEmployee.Domain.Employees.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("iEmployee.Domain.JobHistory", b =>
                {
                    b.HasOne("iEmployee.Domain.Employees.Employee", "Employee")
                        .WithMany("JobHistories")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iEmployee.Domain.Position", "Position")
                        .WithMany("JobHistories")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
